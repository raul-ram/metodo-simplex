package Paq_Modificado;

import java.awt.ScrollPane;
import java.text.DecimalFormat;
import javax.swing.DefaultCellEditor;
import javax.swing.ImageIcon;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;

/**
 *
 * @author RAUL
 */
public class MDIApplication_Principal extends javax.swing.JFrame {

    double Matriz[][] = null;
    int restricciones = 0, variables = 0, iter = 0, iteracion = 0;
    Object array[] = null;
    Object EtiquetaX[] = null, EtiquetaY[] = null;
    static DecimalFormat df = new DecimalFormat("#.##");
    private JComboBox comboBox;
    private String menorIgualQue = "<=";
    private String mayorIgualQue = ">=";
    private String igualQue = "=";
    private boolean opc;//true maximizar

    public MDIApplication_Principal() {
        initComponents();
        setLocationRelativeTo(null);
        setIconImage(new ImageIcon(getClass().getResource("/fig/icon.png")).getImage());
        comboBox = new JComboBox();
        comboBox.addItem(menorIgualQue);
        comboBox.addItem(mayorIgualQue);
        comboBox.addItem(igualQue);
        jTable1.setModel(new DefaultTableModel());
        jTableSolucion.setModel(new DefaultTableModel());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        ayuda = new javax.swing.JTextArea();
        jPanel3 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        txtRestriccion = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        btnAceptar = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        txtVariable = new javax.swing.JTextField();
        opctimizacion = new javax.swing.JComboBox();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        btnSolucion = new javax.swing.JButton();
        btnSolucion1 = new javax.swing.JButton();
        lbl_Iteraccion = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        ecuaciones = new javax.swing.JTextArea();
        jScrollPane5 = new javax.swing.JScrollPane();
        jTableSolucion = new javax.swing.JTable();
        jScrollPane6 = new javax.swing.JScrollPane();
        resultados = new javax.swing.JTextArea();
        jLabel4 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();

        ayuda.setColumns(20);
        ayuda.setRows(5);
        jScrollPane2.setViewportView(ayuda);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("MÃ©todo Simplex | Raminfo");
        setResizable(false);

        jPanel3.setBackground(new java.awt.Color(165, 42, 42));
        jPanel3.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jPanel1.setBackground(new java.awt.Color(47, 79, 79));
        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 102, 102)));

        jLabel1.setForeground(new java.awt.Color(204, 255, 255));
        jLabel1.setText("Nro de Restricciones:");

        btnAceptar.setBackground(new java.awt.Color(244, 164, 96));
        btnAceptar.setText("Aceptar");
        btnAceptar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAceptarActionPerformed(evt);
            }
        });

        jLabel2.setForeground(new java.awt.Color(204, 255, 255));
        jLabel2.setText("Nro de Variables:");

        opctimizacion.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Maximizar", "Minimizar" }));
        opctimizacion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                opctimizacionActionPerformed(evt);
            }
        });

        jLabel3.setForeground(new java.awt.Color(204, 255, 255));
        jLabel3.setText("Tipo de Problerma");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(opctimizacion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addGap(36, 36, 36))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addGap(18, 18, 18)))
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtRestriccion)
                            .addComponent(txtVariable)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(34, 34, 34)
                        .addComponent(btnAceptar, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(opctimizacion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtRestriccion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtVariable, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnAceptar)
                .addContainerGap(38, Short.MAX_VALUE))
        );

        jTable1.setBackground(new java.awt.Color(255, 222, 173));
        jTable1.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 1, 1, 1, new java.awt.Color(0, 0, 153)));
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "                X1", "                X2", "                X3", "                X4"
            }
        ));
        jTable1.setGridColor(new java.awt.Color(0, 0, 204));
        jScrollPane1.setViewportView(jTable1);

        btnSolucion.setFont(new java.awt.Font("Verdana", 1, 11)); // NOI18N
        btnSolucion.setText("SOLUCION");
        btnSolucion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSolucionActionPerformed(evt);
            }
        });

        btnSolucion1.setFont(new java.awt.Font("Verdana", 1, 11)); // NOI18N
        btnSolucion1.setText("INTERACCION");
        btnSolucion1.setToolTipText("");
        btnSolucion1.setEnabled(false);
        btnSolucion1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSolucion1ActionPerformed(evt);
            }
        });

        lbl_Iteraccion.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        lbl_Iteraccion.setForeground(new java.awt.Color(204, 255, 255));

        ecuaciones.setBackground(new java.awt.Color(244, 164, 96));
        ecuaciones.setColumns(20);
        ecuaciones.setRows(5);
        jScrollPane3.setViewportView(ecuaciones);

        jTableSolucion.setBackground(new java.awt.Color(255, 222, 173));
        jTableSolucion.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 1, 1, 1, new java.awt.Color(0, 0, 153)));
        jTableSolucion.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "                X1", "                X2", "                X3", "                X4"
            }
        ));
        jTableSolucion.setGridColor(new java.awt.Color(0, 0, 204));
        jScrollPane5.setViewportView(jTableSolucion);

        resultados.setBackground(new java.awt.Color(244, 164, 96));
        resultados.setColumns(20);
        resultados.setFont(new java.awt.Font("Monospaced", 0, 14)); // NOI18N
        resultados.setRows(5);
        jScrollPane6.setViewportView(resultados);

        jLabel4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/fig/min.png"))); // NOI18N
        jLabel4.setText("jLabel4");

        jLabel6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/fig/max.png"))); // NOI18N
        jLabel6.setText("jLabel4");

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setText("Ecuacion Z y Restricciones");

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(255, 255, 255));
        jLabel7.setText("Resultados");

        jLabel8.setIcon(new javax.swing.ImageIcon(getClass().getResource("/fig/icon.png"))); // NOI18N
        jLabel8.setText("jLabel8");

        jButton2.setBackground(new java.awt.Color(153, 255, 255));
        jButton2.setForeground(new java.awt.Color(0, 204, 51));
        jButton2.setText("Ayuda");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jLabel9.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(255, 255, 255));
        jLabel9.setText("PASO:1");

        jLabel10.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(255, 255, 255));
        jLabel10.setText("PASO: 2");

        jLabel11.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel11.setForeground(new java.awt.Color(255, 255, 255));
        jLabel11.setText("PASO: 3");

        jLabel13.setIcon(new javax.swing.ImageIcon(getClass().getResource("/fig/raminfo.png"))); // NOI18N

        jLabel12.setForeground(new java.awt.Color(255, 255, 255));
        jLabel12.setText("raul.ayllon.manrrique@gmail.com");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 571, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(jLabel11)
                                .addGap(119, 119, 119)
                                .addComponent(btnSolucion)
                                .addGap(66, 66, 66)
                                .addComponent(btnSolucion1)
                                .addGap(18, 18, 18)
                                .addComponent(lbl_Iteraccion, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(85, 85, 85)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel7)
                            .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 401, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap())
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel3Layout.createSequentialGroup()
                                        .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabel9))
                                    .addComponent(jLabel10))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jButton2))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 571, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 401, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(jPanel3Layout.createSequentialGroup()
                                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel5)
                                            .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(22, 22, 22))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 364, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))))
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(392, 392, 392)
                .addComponent(jLabel12)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(jLabel9)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel10))))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                        .addGap(10, 10, 10)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButton2, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel5)))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 49, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(27, 27, 27)))
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(btnSolucion)
                                    .addComponent(btnSolucion1))
                                .addGap(18, 34, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                                        .addComponent(jLabel7)
                                        .addGap(10, 10, 10))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                                        .addComponent(jLabel11)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))))
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                            .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(lbl_Iteraccion, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(21, 21, 21)
                .addComponent(jLabel12)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 22, Short.MAX_VALUE)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void imprimirMatriz() {
        System.out.println("\n\n\n");
        for (int i = 0; i < restricciones + 1; i++) {
            for (int j = 0; j < restricciones + variables + 1; j++) {
                System.out.print(Matriz[i][j] + "\t");
            }
            System.out.println("");
        }
    }

    public static double convert(String s) {
        return Double.parseDouble(s);
    }

    public int ColumnaPivote() {
        int pos = 0;
        double aux = Matriz[restricciones][0];
        for (int i = 1; i < restricciones + variables; i++) {
            if (aux > Matriz[restricciones][i]) {
                aux = Matriz[restricciones][i];
                pos = i;
            }
        }
        return pos;
    }

    public int FilaPivote() {
        int columna = ColumnaPivote();  //llamamos a la columna del pivot
        double temp = 0;
        Double razon = null;
        int pos = 0;
        for (int i = 0; i < restricciones; i++) {
            double columPiv = Matriz[i][columna];
            double columSoluc = Matriz[i][variables + restricciones];
            if ((columPiv > 0 && columSoluc > 0) || (columPiv < 0 && columSoluc < 0)) {
                temp = columSoluc / columPiv;
                if ((razon == null) || temp < razon) {
                    razon = temp;
                    pos = i;
                }
            }

        }
        return pos;
    }

    public void NuevaTabla(int Fila, int Columna) {

        double pivote = Matriz[Fila][Columna], temp = 0;//--
        System.out.println("pivote [" + Fila + "]" + "[" + Columna + "]=" + pivote);
        for (int i = 0; i < restricciones + variables + 1; i++) {
            Matriz[Fila][i] = Matriz[Fila][i] / pivote;
        }
        for (int i = 0; i < restricciones + 1; i++) {
            temp = Matriz[i][Columna];
            for (int j = 0; j < variables + restricciones + 1; j++) {
                if (i != Fila) {
                    Matriz[i][j] = Matriz[i][j] - temp * Matriz[Fila][j];
                } else {
                    break;
                }
            }
        }
    }

    public boolean ComprobarResultado() {
        boolean result = true;//+ variables
        for (int i = 0; i < restricciones; i++) {
            if (((Matriz[restricciones][i] < 0))) {// && opc || ((Matriz[restricciones][i] > 0) && !opc)
                //if (Matriz[i][restricciones + variables] < 0) {
                result = false;
                break;
            }
        }
        return result;
    }

    private void mostrarEcuaciones() {

        ecuaciones.append((opc ? "Max" : "Min") + " Z = ");
        int i = 1;
        for (; i < variables; i++) {
            ecuaciones.append(jTable1.getModel().getValueAt(restricciones, i).toString() + "X" + i + " + ");
        }
        ecuaciones.append(jTable1.getModel().getValueAt(restricciones, i).toString() + "X" + i + "   --->   Max Z ");

        for (i = 1; i < variables; i++) {
            ecuaciones.append(-1 * convert(jTable1.getModel().getValueAt(restricciones, i).toString()) + "X" + i + " + ");
        }

        ecuaciones.append(-1 * convert(jTable1.getModel().getValueAt(restricciones, i).toString()) + "X" + i + " = 0\n   Sujeto a: \n"
                + "      ");
        for (i = 0; i < jTable1.getRowCount() - 1; i++) {
            for (int k = 1; k < jTable1.getColumnCount(); k++) {
                if (k != jTable1.getColumnCount() - 2) {//si no es el simbolo
                    if (k + 1 == jTable1.getColumnCount() - 2) {//si viene el simbolo
                        ecuaciones.append(jTable1.getValueAt(i, k).toString() + "X" + k + " ");
                    } else {
                        if (k == jTable1.getColumnCount() - 1) {//si es el ultimo
                            ecuaciones.append(jTable1.getValueAt(i, k).toString());
                        } else {
                            ecuaciones.append(jTable1.getValueAt(i, k).toString() + "X" + k + " + ");
                        }
                    }
                } else {
                    ecuaciones.append(jTable1.getValueAt(i, k).toString() + " ");
                }
            }
            ecuaciones.append("   --->   ");
            boolean sw = jTable1.getModel().getValueAt(i, jTable1.getModel().getColumnCount() - 2).equals(mayorIgualQue);
            String car = "X";
            int varr = 1;
            for (int kk = 1; kk < variables + restricciones + 3; kk++) {

                if (kk > variables && !car.equals("S")) {
                    car = "S";
                    varr = 1;
                }

                if (kk != jTable1.getModel().getColumnCount() - 2) {//si no es el simbolo

                    if (sw) {
                        if (kk + 1 == jTable1.getModel().getColumnCount() - 2) {//si viene el simbolo
                            ecuaciones.append(-1 * convert(jTable1.getModel().getValueAt(i, kk).toString()) + car + (varr++) + "  ");
                        } else {
                            if (kk == jTable1.getModel().getColumnCount() - 1) {//si es el ultimo
                                ecuaciones.append((-1 * convert(jTable1.getModel().getValueAt(i, kk).toString())) + "");
                            } else {
                                ecuaciones.append(-1 * convert(jTable1.getModel().getValueAt(i, kk).toString()) + car + (varr++) + " + ");
                            }
                        }

                    } else {
                        if (kk + 1 == jTable1.getModel().getColumnCount() - 2) {//si viene el simbolo
                            ecuaciones.append(jTable1.getModel().getValueAt(i, kk).toString() + car + (varr++) + "  ");
                        } else {
                            if (kk == jTable1.getModel().getColumnCount() - 1) {//si es el ultimo
                                ecuaciones.append(jTable1.getModel().getValueAt(i, kk).toString() + "");
                            } else {
                                ecuaciones.append(jTable1.getModel().getValueAt(i, kk).toString() + car + (varr++) + " + ");
                            }
                        }
                    }
                } else {
                    ecuaciones.append(" = ");
                }
            }
            ecuaciones.append("\n      ");
        }
    }

    private void mostrarResultados() {
        resultados.append("\n\n\nVerificar...\n  Max Z = ");
        int i = 1;
        int pos;
        double resultado = 0, valor = 0, coeficiente = 0;
        for (; i < variables; i++) {
            pos = buscarVariable("X" + i);
            valor = (pos == -1 ? 0 : convert(jTableSolucion.getModel().getValueAt(pos, jTableSolucion.getModel().getColumnCount() - 1).toString()));
            coeficiente = convert(jTable1.getModel().getValueAt(restricciones, i).toString());
            resultados.append(coeficiente + "(" + valor + ") + ");
            resultado += coeficiente * valor;
        }
        pos = buscarVariable("X" + i);
        valor = (pos == -1 ? 0 : convert(jTableSolucion.getModel().getValueAt(pos, jTableSolucion.getModel().getColumnCount() - 1).toString()));
        coeficiente = convert(jTable1.getModel().getValueAt(restricciones, i).toString());
        resultados.append(coeficiente + "(" + valor + ") ");
        resultado += coeficiente * valor;

        resultados.append(" = " + resultado);
        resultados.append("\n");
        
        resultados.append("  Lado Derecho \n");
        for (int j = 0; j <= restricciones-1; j++) {
            double ld = Matriz[j][restricciones + variables];
            resultados.append(">> x"+(j+1)+" = "+ld + "\n");
        }
        resultados.append(" Compare con su Tabla");
    }

    private int buscarVariable(String var) {
        int pos = -1;
        for (int i = 0; i < EtiquetaY.length; i++) {
            if (EtiquetaY[i].equals(var)) {
                return i;
            }
        }
        return pos;
    }

    private void btnAceptarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAceptarActionPerformed
        try {
            ecuaciones.setText("");
            resultados.setText("");
            restricciones = Integer.parseInt(txtRestriccion.getText());
            variables = Integer.parseInt(txtVariable.getText());
            jTableSolucion.setModel(new DefaultTableModel());
            btnSolucion.setEnabled(true);
            btnSolucion1.setEnabled(false);

            DefaultTableModel modelo = new DefaultTableModel();
            modelo.setRowCount(restricciones + 1);
            modelo.setColumnCount(variables + restricciones + 3);
            array = new Object[variables + restricciones + 2];
            Object[] array2 = new Object[variables + restricciones + 3];
            array[0] = "";
            array2[0] = "";
            EtiquetaX = new Object[variables + restricciones];
            for (int i = 1; i < array.length - 1; i++) {
                if (i < variables + 1) {
                    array[i] = "X" + i;
                    array2[i] = "X" + i;
                    EtiquetaX[i - 1] = "X" + i;
                } else {
                    array[i] = "S" + (i - variables);
                    array2[i] = "S" + (i - variables);
                    EtiquetaX[i - 1] = "S" + (i - variables);
                }
            }
            //----------------------
            array[array.length - 1] = "VB";
            array2[array2.length - 2] = "SÃ­mbolo";
            array2[array2.length - 1] = "VB";
            modelo.setColumnIdentifiers(array2);
            //---------------------
            EtiquetaY = new Object[restricciones + 1];
            for (int i = 0; i < restricciones; i++) {
                modelo.setValueAt("R" + (i + 1), i, 0);
                modelo.setValueAt(menorIgualQue, i, modelo.getColumnCount() - 2);
                EtiquetaY[i] = "S" + (i + 1);
            }
            modelo.setValueAt("Z", restricciones, 0);
            EtiquetaY[restricciones] = "Z";

            jTable1.setModel(modelo);

            TableColumn signo = jTable1.getColumnModel().getColumn(jTable1.getColumnCount() - 2);
            signo.setCellEditor(new DefaultCellEditor(comboBox));

            for (int i = 0; i < restricciones; i++) {
                jTable1.removeColumn(jTable1.getColumnModel().getColumn(variables + 1));
            }
        } catch (Exception e) {
            java.util.logging.Logger.getLogger(MDIApplication_Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, e);
        }
    }//GEN-LAST:event_btnAceptarActionPerformed


    private void btnSolucionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSolucionActionPerformed
        try {
            lbl_Iteraccion.setText("");
            opc = opctimizacion.getSelectedIndex() == 0;

            for (int i = 0; i < jTable1.getModel().getRowCount(); i++) {

                for (int j = 0; j < restricciones; j++) {
                    jTable1.getModel().setValueAt("0", i, variables + 1 + j);
                }

                if (i != jTable1.getModel().getRowCount() - 1) {//sino es z
                    Object o = jTable1.getModel().getValueAt(i, jTable1.getModel().getColumnCount() - 2);
                    if (o.equals(menorIgualQue) || o.equals(mayorIgualQue)) {
                        jTable1.getModel().setValueAt("1", i, variables + 1 + i);
                    } else {
                        jTable1.getModel().setValueAt("0", i, variables + 1 + i);
                    }
                }
            }

            jTable1.getModel().setValueAt("0", jTable1.getModel().getRowCount() - 1, jTable1.getModel().getColumnCount() - 1);

            mostrarEcuaciones();

            DefaultTableModel modeloSolucion = new DefaultTableModel();
            Matriz = new double[restricciones + 1][restricciones + variables + 1];
            for (int i = 0; i < (restricciones + 1); i++) {
                boolean sw = ((i == restricciones) && opc)
                        || jTable1.getModel().getValueAt(i, jTable1.getModel().getColumnCount() - 2) != null
                        && (jTable1.getModel().getValueAt(i, jTable1.getModel().getColumnCount() - 2).equals(mayorIgualQue));

                for (int j = 0; j < (restricciones + variables + 1); j++) {
                    double d;
                    if (j == (restricciones + variables)) {//para saltarse el signo
                        d = convert(jTable1.getModel().getValueAt(i, j + 2).toString());
                        Matriz[i][j] = sw ? d * -1 : d;
                    } else {
                        d = convert(jTable1.getModel().getValueAt(i, j + 1).toString());
                        Matriz[i][j] = sw ? d * -1 : d;
                    }

                }
            }

            while (ComprobarResultado() != true) {
                imprimirMatriz();
                EtiquetaY[FilaPivote()] = EtiquetaX[ColumnaPivote()];
                NuevaTabla(FilaPivote(), ColumnaPivote());
                modeloSolucion.setColumnCount(restricciones + variables + 2);
                modeloSolucion.setRowCount(restricciones + 1);
                //--------------------------
                modeloSolucion.setColumnIdentifiers(array);
                //---------------------------
                for (int i = 0; i < (restricciones + 1); i++) {
                    modeloSolucion.setValueAt(EtiquetaY[i], i, 0);
                    for (int j = 0; j < (restricciones + variables + 1); j++) {
                        modeloSolucion.setValueAt(Matriz[i][j], i, j + 1);
                    }
                }
                jTableSolucion.setModel(modeloSolucion);
                iteracion++;
            }
            imprimirMatriz();
            btnSolucion.setEnabled(false);
            btnSolucion1.setEnabled(true);
            mostrarResultados();
        } catch (Exception e) {
            java.util.logging.Logger.getLogger(MDIApplication_Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, e);
        }
    }//GEN-LAST:event_btnSolucionActionPerformed

    private void btnSolucion1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSolucion1ActionPerformed
        try {
            DefaultTableModel modeloSolucion = new DefaultTableModel();
            Matriz = new double[restricciones + 1][restricciones + variables + 1];
            for (int i = 0; i < (restricciones + 1); i++) {
                boolean sw = i == restricciones || jTable1.getModel().getValueAt(i, jTable1.getModel().getColumnCount() - 2).equals(mayorIgualQue);

                for (int j = 0; j < (restricciones + variables + 1); j++) {
                    double d;
                    if (j == (restricciones + variables)) {//para saltarse el signo
                        d = convert(jTable1.getModel().getValueAt(i, j + 2).toString());
                        Matriz[i][j] = sw ? d * -1 : d;
                    } else {
                        d = convert(jTable1.getModel().getValueAt(i, j + 1).toString());
                        Matriz[i][j] = sw ? d * -1 : d;
                    }

                }
            }
            int k = 0;
            iter++;
            if (iter <= iteracion) {
                lbl_Iteraccion.setText(": " + iter);
                while (iter > k) {
                    EtiquetaY[FilaPivote()] = EtiquetaX[ColumnaPivote()];
                    NuevaTabla(FilaPivote(), ColumnaPivote());
                    modeloSolucion.setColumnCount(restricciones + variables + 2);
                    modeloSolucion.setRowCount(restricciones + 1);
                    //--------------------------
                    modeloSolucion.setColumnIdentifiers(array);
                    //---------------------------
                    for (int i = 0; i < (restricciones + 1); i++) {
                        modeloSolucion.setValueAt(EtiquetaY[i], i, 0);
                        for (int j = 0; j < (restricciones + variables + 1); j++) {
                            modeloSolucion.setValueAt(Matriz[i][j], i, j + 1);
                        }
                    }
                    jTableSolucion.setModel(modeloSolucion);
                    k++;
                }
            } else {
                iter = 0;
                iteracion = 0;
                lbl_Iteraccion.setText("Final");
                btnSolucion.setEnabled(true);
                btnSolucion1.setEnabled(false);
            }
        } catch (Exception e) {
            System.out.println(e.getMessage());
            System.out.println(e.getClass());
        }
    }//GEN-LAST:event_btnSolucion1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        new Ayuda(this, true).setVisible(true);
    }//GEN-LAST:event_jButton2ActionPerformed

    private void opctimizacionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_opctimizacionActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_opctimizacionActionPerformed
    /**/

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new MDIApplication_Principal().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea ayuda;
    private javax.swing.JButton btnAceptar;
    private javax.swing.JButton btnSolucion;
    private javax.swing.JButton btnSolucion1;
    private javax.swing.JTextArea ecuaciones;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTableSolucion;
    private javax.swing.JLabel lbl_Iteraccion;
    private javax.swing.JComboBox opctimizacion;
    private javax.swing.JTextArea resultados;
    private javax.swing.JTextField txtRestriccion;
    private javax.swing.JTextField txtVariable;
    // End of variables declaration//GEN-END:variables
}
